/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Gets the branch configuration
 *
 * @param {string} branch The branch name
 *
 * @param {string} ownerName The name of the owner
 *
 * @param {string} appName The name of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(branch, ownerName, appName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (branch === null || branch === undefined || typeof branch.valueOf() !== 'string') {
      throw new Error('branch cannot be null or undefined and it must be of type string.');
    }
    if (ownerName === null || ownerName === undefined || typeof ownerName.valueOf() !== 'string') {
      throw new Error('ownerName cannot be null or undefined and it must be of type string.');
    }
    if (appName === null || appName === undefined || typeof appName.valueOf() !== 'string') {
      throw new Error('appName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';
  requestUrl = requestUrl.replace('{branch}', encodeURIComponent(branch));
  requestUrl = requestUrl.replace('{owner_name}', encodeURIComponent(ownerName));
  requestUrl = requestUrl.replace('{app_name}', encodeURIComponent(appName));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['GetErrorModel10']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Configures the branch for build
 *
 * @param {string} branch The branch name
 *
 * @param {object} params Parameters of the configuration
 *
 * @param {string} [params.trigger] Possible values include: 'continous',
 * 'continuous', 'manual'
 *
 * @param {boolean} [params.testsEnabled]
 *
 * @param {boolean} [params.badgeIsEnabled]
 *
 * @param {boolean} [params.signed]
 *
 * @param {string} [params.cloneFromBranch] A configured branch name to clone
 * from. If provided, all other parameters will be ignored. Only supported in
 * POST requests.
 *
 * @param {object} [params.toolsets] The branch build configuration for each
 * toolset
 *
 * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
 * part of the build steps
 *
 * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
 * project/workspace path
 *
 * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
 * if present
 *
 * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
 * if present
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
 *
 * @param {string} [params.toolsets.xcode.certificateEncoded]
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
 *
 * @param {string} [params.toolsets.xcode.certificateFileId]
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
 *
 * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
 *
 * @param {string} [params.toolsets.xcode.certificateUploadId]
 *
 * @param {string} [params.toolsets.xcode.certificatePassword]
 *
 * @param {string} [params.toolsets.xcode.scheme]
 *
 * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
 * build. Available versions can be found in "/xcode_versions" API. Default is
 * latest stable version, at the time when the configuration is set.
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
 *
 * @param {string} [params.toolsets.xcode.certificateFilename]
 *
 * @param {string} [params.toolsets.xcode.teamId]
 *
 * @param {boolean} [params.toolsets.xcode.automaticSigning]
 *
 * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
 * pbxproject hash to the repositroy
 *
 * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
 * configuration of the target to archive
 *
 * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
 * selected scheme to archive
 *
 * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
 * to true forces the build to use Xcode legacy build system. Otherwise, the
 * setting from workspace settings is used.
 * By default new build system is used if workspace setting is not committed to
 * the repository. Only used for iOS React Native app, with Xcode 10.
 *
 *
 * @param {object} [params.toolsets.javascript] Build configuration when React
 * Native, or other JavaScript tech, is part of the build steps
 *
 * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
 * package.json file for the main project, e.g. "package.json" or
 * "myapp/package.json"
 *
 * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
 * unit tests, via npm test, during the build
 *
 * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
 * React Native from package.json files
 *
 * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
 * projects
 *
 * @param {string} [params.toolsets.xamarin.slnPath]
 *
 * @param {boolean} [params.toolsets.xamarin.isSimBuild]
 *
 * @param {string} [params.toolsets.xamarin.args]
 *
 * @param {string} [params.toolsets.xamarin.configuration]
 *
 * @param {string} [params.toolsets.xamarin.p12File]
 *
 * @param {string} [params.toolsets.xamarin.p12Pwd]
 *
 * @param {string} [params.toolsets.xamarin.provProfile]
 *
 * @param {string} [params.toolsets.xamarin.monoVersion]
 *
 * @param {string} [params.toolsets.xamarin.sdkBundle]
 *
 * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
 * and Mono installation.
 * The build will use the associated Mono bundled with related Xamarin SDK. If
 * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
 * precedence. If non-existing symlink is passed, the current stable Mono
 * version will be configured for building.
 *
 *
 * @param {object} [params.toolsets.android] Build configuration for Android
 * projects
 *
 * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
 * Gradle wrapper script
 *
 * @param {string} [params.toolsets.android.module] The Gradle module to build
 *
 * @param {string} [params.toolsets.android.buildVariant] The Android build
 * variant to build
 *
 * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
 * tests during the build (default)
 *
 * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
 * checks during the build (default)
 *
 * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
 * module or not
 *
 * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
 * automatic signing or not
 *
 * @param {string} [params.toolsets.android.keystorePassword] The password of
 * the keystore
 *
 * @param {string} [params.toolsets.android.keyAlias] The key alias
 *
 * @param {string} [params.toolsets.android.keyPassword] The key password
 *
 * @param {string} [params.toolsets.android.keystoreFilename] The name of the
 * keystore file
 *
 * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
 * encoded value
 *
 * @param {object} [params.artifactVersioning] The versioning configuration for
 * artifacts built for this branch
 *
 * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
 * values include: 'buildId', 'timestamp'
 *
 * @param {string} ownerName The name of the owner
 *
 * @param {string} appName The name of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CreateOKResponseModelModelModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(branch, params, ownerName, appName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (branch === null || branch === undefined || typeof branch.valueOf() !== 'string') {
      throw new Error('branch cannot be null or undefined and it must be of type string.');
    }
    if (params === null || params === undefined) {
      throw new Error('params cannot be null or undefined.');
    }
    if (ownerName === null || ownerName === undefined || typeof ownerName.valueOf() !== 'string') {
      throw new Error('ownerName cannot be null or undefined and it must be of type string.');
    }
    if (appName === null || appName === undefined || typeof appName.valueOf() !== 'string') {
      throw new Error('appName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';
  requestUrl = requestUrl.replace('{branch}', encodeURIComponent(branch));
  requestUrl = requestUrl.replace('{owner_name}', encodeURIComponent(ownerName));
  requestUrl = requestUrl.replace('{app_name}', encodeURIComponent(appName));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (params !== null && params !== undefined) {
      let requestModelMapper = new client.models['Params']().mapper();
      requestModel = client.serialize(requestModelMapper, params, 'params');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(params, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CreateOKResponseModelModelModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Reconfigures the branch for build
 *
 * @param {string} branch The branch name
 *
 * @param {object} params Parameters of the configuration
 *
 * @param {string} [params.trigger] Possible values include: 'continous',
 * 'continuous', 'manual'
 *
 * @param {boolean} [params.testsEnabled]
 *
 * @param {boolean} [params.badgeIsEnabled]
 *
 * @param {boolean} [params.signed]
 *
 * @param {string} [params.cloneFromBranch] A configured branch name to clone
 * from. If provided, all other parameters will be ignored. Only supported in
 * POST requests.
 *
 * @param {object} [params.toolsets] The branch build configuration for each
 * toolset
 *
 * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
 * part of the build steps
 *
 * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
 * project/workspace path
 *
 * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
 * if present
 *
 * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
 * if present
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
 *
 * @param {string} [params.toolsets.xcode.certificateEncoded]
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
 *
 * @param {string} [params.toolsets.xcode.certificateFileId]
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
 *
 * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
 *
 * @param {string} [params.toolsets.xcode.certificateUploadId]
 *
 * @param {string} [params.toolsets.xcode.certificatePassword]
 *
 * @param {string} [params.toolsets.xcode.scheme]
 *
 * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
 * build. Available versions can be found in "/xcode_versions" API. Default is
 * latest stable version, at the time when the configuration is set.
 *
 * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
 *
 * @param {string} [params.toolsets.xcode.certificateFilename]
 *
 * @param {string} [params.toolsets.xcode.teamId]
 *
 * @param {boolean} [params.toolsets.xcode.automaticSigning]
 *
 * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
 * pbxproject hash to the repositroy
 *
 * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
 * configuration of the target to archive
 *
 * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
 * selected scheme to archive
 *
 * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
 * to true forces the build to use Xcode legacy build system. Otherwise, the
 * setting from workspace settings is used.
 * By default new build system is used if workspace setting is not committed to
 * the repository. Only used for iOS React Native app, with Xcode 10.
 *
 *
 * @param {object} [params.toolsets.javascript] Build configuration when React
 * Native, or other JavaScript tech, is part of the build steps
 *
 * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
 * package.json file for the main project, e.g. "package.json" or
 * "myapp/package.json"
 *
 * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
 * unit tests, via npm test, during the build
 *
 * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
 * React Native from package.json files
 *
 * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
 * projects
 *
 * @param {string} [params.toolsets.xamarin.slnPath]
 *
 * @param {boolean} [params.toolsets.xamarin.isSimBuild]
 *
 * @param {string} [params.toolsets.xamarin.args]
 *
 * @param {string} [params.toolsets.xamarin.configuration]
 *
 * @param {string} [params.toolsets.xamarin.p12File]
 *
 * @param {string} [params.toolsets.xamarin.p12Pwd]
 *
 * @param {string} [params.toolsets.xamarin.provProfile]
 *
 * @param {string} [params.toolsets.xamarin.monoVersion]
 *
 * @param {string} [params.toolsets.xamarin.sdkBundle]
 *
 * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
 * and Mono installation.
 * The build will use the associated Mono bundled with related Xamarin SDK. If
 * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
 * precedence. If non-existing symlink is passed, the current stable Mono
 * version will be configured for building.
 *
 *
 * @param {object} [params.toolsets.android] Build configuration for Android
 * projects
 *
 * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
 * Gradle wrapper script
 *
 * @param {string} [params.toolsets.android.module] The Gradle module to build
 *
 * @param {string} [params.toolsets.android.buildVariant] The Android build
 * variant to build
 *
 * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
 * tests during the build (default)
 *
 * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
 * checks during the build (default)
 *
 * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
 * module or not
 *
 * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
 * automatic signing or not
 *
 * @param {string} [params.toolsets.android.keystorePassword] The password of
 * the keystore
 *
 * @param {string} [params.toolsets.android.keyAlias] The key alias
 *
 * @param {string} [params.toolsets.android.keyPassword] The key password
 *
 * @param {string} [params.toolsets.android.keystoreFilename] The name of the
 * keystore file
 *
 * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
 * encoded value
 *
 * @param {object} [params.artifactVersioning] The versioning configuration for
 * artifacts built for this branch
 *
 * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
 * values include: 'buildId', 'timestamp'
 *
 * @param {string} ownerName The name of the owner
 *
 * @param {string} appName The name of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      UpdateOKResponseModelModelModelModelModelModelModelModel}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(branch, params, ownerName, appName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (branch === null || branch === undefined || typeof branch.valueOf() !== 'string') {
      throw new Error('branch cannot be null or undefined and it must be of type string.');
    }
    if (params === null || params === undefined) {
      throw new Error('params cannot be null or undefined.');
    }
    if (ownerName === null || ownerName === undefined || typeof ownerName.valueOf() !== 'string') {
      throw new Error('ownerName cannot be null or undefined and it must be of type string.');
    }
    if (appName === null || appName === undefined || typeof appName.valueOf() !== 'string') {
      throw new Error('appName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';
  requestUrl = requestUrl.replace('{branch}', encodeURIComponent(branch));
  requestUrl = requestUrl.replace('{owner_name}', encodeURIComponent(ownerName));
  requestUrl = requestUrl.replace('{app_name}', encodeURIComponent(appName));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (params !== null && params !== undefined) {
      let requestModelMapper = new client.models['Params']().mapper();
      requestModel = client.serialize(requestModelMapper, params, 'params');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(params, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UpdateOKResponseModelModelModelModelModelModelModelModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes the branch build configuration
 *
 * @param {string} branch The branch name
 *
 * @param {string} ownerName The name of the owner
 *
 * @param {string} appName The name of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.payload]
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DeleteOKResponseModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(branch, ownerName, appName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let payload = (options && options.payload !== undefined) ? options.payload : undefined;
  // Validate
  try {
    if (branch === null || branch === undefined || typeof branch.valueOf() !== 'string') {
      throw new Error('branch cannot be null or undefined and it must be of type string.');
    }
    if (payload !== null && payload !== undefined && typeof payload !== 'object') {
      throw new Error('payload must be of type object.');
    }
    if (ownerName === null || ownerName === undefined || typeof ownerName.valueOf() !== 'string') {
      throw new Error('ownerName cannot be null or undefined and it must be of type string.');
    }
    if (appName === null || appName === undefined || typeof appName.valueOf() !== 'string') {
      throw new Error('appName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config';
  requestUrl = requestUrl.replace('{branch}', encodeURIComponent(branch));
  requestUrl = requestUrl.replace('{owner_name}', encodeURIComponent(ownerName));
  requestUrl = requestUrl.replace('{app_name}', encodeURIComponent(appName));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (payload !== null && payload !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'payload',
        type: {
          name: 'Object'
        }
      };
      requestModel = client.serialize(requestModelMapper, payload, 'payload');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(payload, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DeleteOKResponseModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a BranchConfigurations. */
class BranchConfigurations {
  /**
   * Create a BranchConfigurations.
   * @param {AppCenterClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._create = _create;
    this._update = _update;
    this._deleteMethod = _deleteMethod;
  }

  /**
   * Gets the branch configuration
   *
   * @param {string} branch The branch name
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(branch, ownerName, appName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(branch, ownerName, appName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the branch configuration
   *
   * @param {string} branch The branch name
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetOKResponseModelModelModelModelModelModelModelModelModelModelModelModel}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(branch, ownerName, appName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(branch, ownerName, appName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(branch, ownerName, appName, options, optionalCallback);
    }
  }

  /**
   * Configures the branch for build
   *
   * @param {string} branch The branch name
   *
   * @param {object} params Parameters of the configuration
   *
   * @param {string} [params.trigger] Possible values include: 'continous',
   * 'continuous', 'manual'
   *
   * @param {boolean} [params.testsEnabled]
   *
   * @param {boolean} [params.badgeIsEnabled]
   *
   * @param {boolean} [params.signed]
   *
   * @param {string} [params.cloneFromBranch] A configured branch name to clone
   * from. If provided, all other parameters will be ignored. Only supported in
   * POST requests.
   *
   * @param {object} [params.toolsets] The branch build configuration for each
   * toolset
   *
   * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
   * part of the build steps
   *
   * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
   * project/workspace path
   *
   * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
   *
   * @param {string} [params.toolsets.xcode.certificateEncoded]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
   *
   * @param {string} [params.toolsets.xcode.certificateFileId]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
   *
   * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
   *
   * @param {string} [params.toolsets.xcode.certificateUploadId]
   *
   * @param {string} [params.toolsets.xcode.certificatePassword]
   *
   * @param {string} [params.toolsets.xcode.scheme]
   *
   * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
   * build. Available versions can be found in "/xcode_versions" API. Default is
   * latest stable version, at the time when the configuration is set.
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
   *
   * @param {string} [params.toolsets.xcode.certificateFilename]
   *
   * @param {string} [params.toolsets.xcode.teamId]
   *
   * @param {boolean} [params.toolsets.xcode.automaticSigning]
   *
   * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
   * pbxproject hash to the repositroy
   *
   * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
   * configuration of the target to archive
   *
   * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
   * selected scheme to archive
   *
   * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
   * to true forces the build to use Xcode legacy build system. Otherwise, the
   * setting from workspace settings is used.
   * By default new build system is used if workspace setting is not committed to
   * the repository. Only used for iOS React Native app, with Xcode 10.
   *
   *
   * @param {object} [params.toolsets.javascript] Build configuration when React
   * Native, or other JavaScript tech, is part of the build steps
   *
   * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
   * package.json file for the main project, e.g. "package.json" or
   * "myapp/package.json"
   *
   * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
   * unit tests, via npm test, during the build
   *
   * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
   * React Native from package.json files
   *
   * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
   * projects
   *
   * @param {string} [params.toolsets.xamarin.slnPath]
   *
   * @param {boolean} [params.toolsets.xamarin.isSimBuild]
   *
   * @param {string} [params.toolsets.xamarin.args]
   *
   * @param {string} [params.toolsets.xamarin.configuration]
   *
   * @param {string} [params.toolsets.xamarin.p12File]
   *
   * @param {string} [params.toolsets.xamarin.p12Pwd]
   *
   * @param {string} [params.toolsets.xamarin.provProfile]
   *
   * @param {string} [params.toolsets.xamarin.monoVersion]
   *
   * @param {string} [params.toolsets.xamarin.sdkBundle]
   *
   * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
   * and Mono installation.
   * The build will use the associated Mono bundled with related Xamarin SDK. If
   * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
   * precedence. If non-existing symlink is passed, the current stable Mono
   * version will be configured for building.
   *
   *
   * @param {object} [params.toolsets.android] Build configuration for Android
   * projects
   *
   * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
   * Gradle wrapper script
   *
   * @param {string} [params.toolsets.android.module] The Gradle module to build
   *
   * @param {string} [params.toolsets.android.buildVariant] The Android build
   * variant to build
   *
   * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
   * tests during the build (default)
   *
   * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
   * checks during the build (default)
   *
   * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
   * module or not
   *
   * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
   * automatic signing or not
   *
   * @param {string} [params.toolsets.android.keystorePassword] The password of
   * the keystore
   *
   * @param {string} [params.toolsets.android.keyAlias] The key alias
   *
   * @param {string} [params.toolsets.android.keyPassword] The key password
   *
   * @param {string} [params.toolsets.android.keystoreFilename] The name of the
   * keystore file
   *
   * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
   * encoded value
   *
   * @param {object} [params.artifactVersioning] The versioning configuration for
   * artifacts built for this branch
   *
   * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
   * values include: 'buildId', 'timestamp'
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CreateOKResponseModelModelModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(branch, params, ownerName, appName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(branch, params, ownerName, appName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Configures the branch for build
   *
   * @param {string} branch The branch name
   *
   * @param {object} params Parameters of the configuration
   *
   * @param {string} [params.trigger] Possible values include: 'continous',
   * 'continuous', 'manual'
   *
   * @param {boolean} [params.testsEnabled]
   *
   * @param {boolean} [params.badgeIsEnabled]
   *
   * @param {boolean} [params.signed]
   *
   * @param {string} [params.cloneFromBranch] A configured branch name to clone
   * from. If provided, all other parameters will be ignored. Only supported in
   * POST requests.
   *
   * @param {object} [params.toolsets] The branch build configuration for each
   * toolset
   *
   * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
   * part of the build steps
   *
   * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
   * project/workspace path
   *
   * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
   *
   * @param {string} [params.toolsets.xcode.certificateEncoded]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
   *
   * @param {string} [params.toolsets.xcode.certificateFileId]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
   *
   * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
   *
   * @param {string} [params.toolsets.xcode.certificateUploadId]
   *
   * @param {string} [params.toolsets.xcode.certificatePassword]
   *
   * @param {string} [params.toolsets.xcode.scheme]
   *
   * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
   * build. Available versions can be found in "/xcode_versions" API. Default is
   * latest stable version, at the time when the configuration is set.
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
   *
   * @param {string} [params.toolsets.xcode.certificateFilename]
   *
   * @param {string} [params.toolsets.xcode.teamId]
   *
   * @param {boolean} [params.toolsets.xcode.automaticSigning]
   *
   * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
   * pbxproject hash to the repositroy
   *
   * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
   * configuration of the target to archive
   *
   * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
   * selected scheme to archive
   *
   * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
   * to true forces the build to use Xcode legacy build system. Otherwise, the
   * setting from workspace settings is used.
   * By default new build system is used if workspace setting is not committed to
   * the repository. Only used for iOS React Native app, with Xcode 10.
   *
   *
   * @param {object} [params.toolsets.javascript] Build configuration when React
   * Native, or other JavaScript tech, is part of the build steps
   *
   * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
   * package.json file for the main project, e.g. "package.json" or
   * "myapp/package.json"
   *
   * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
   * unit tests, via npm test, during the build
   *
   * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
   * React Native from package.json files
   *
   * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
   * projects
   *
   * @param {string} [params.toolsets.xamarin.slnPath]
   *
   * @param {boolean} [params.toolsets.xamarin.isSimBuild]
   *
   * @param {string} [params.toolsets.xamarin.args]
   *
   * @param {string} [params.toolsets.xamarin.configuration]
   *
   * @param {string} [params.toolsets.xamarin.p12File]
   *
   * @param {string} [params.toolsets.xamarin.p12Pwd]
   *
   * @param {string} [params.toolsets.xamarin.provProfile]
   *
   * @param {string} [params.toolsets.xamarin.monoVersion]
   *
   * @param {string} [params.toolsets.xamarin.sdkBundle]
   *
   * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
   * and Mono installation.
   * The build will use the associated Mono bundled with related Xamarin SDK. If
   * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
   * precedence. If non-existing symlink is passed, the current stable Mono
   * version will be configured for building.
   *
   *
   * @param {object} [params.toolsets.android] Build configuration for Android
   * projects
   *
   * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
   * Gradle wrapper script
   *
   * @param {string} [params.toolsets.android.module] The Gradle module to build
   *
   * @param {string} [params.toolsets.android.buildVariant] The Android build
   * variant to build
   *
   * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
   * tests during the build (default)
   *
   * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
   * checks during the build (default)
   *
   * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
   * module or not
   *
   * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
   * automatic signing or not
   *
   * @param {string} [params.toolsets.android.keystorePassword] The password of
   * the keystore
   *
   * @param {string} [params.toolsets.android.keyAlias] The key alias
   *
   * @param {string} [params.toolsets.android.keyPassword] The key password
   *
   * @param {string} [params.toolsets.android.keystoreFilename] The name of the
   * keystore file
   *
   * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
   * encoded value
   *
   * @param {object} [params.artifactVersioning] The versioning configuration for
   * artifacts built for this branch
   *
   * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
   * values include: 'buildId', 'timestamp'
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CreateOKResponseModelModelModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CreateOKResponseModelModelModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(branch, params, ownerName, appName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(branch, params, ownerName, appName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(branch, params, ownerName, appName, options, optionalCallback);
    }
  }

  /**
   * Reconfigures the branch for build
   *
   * @param {string} branch The branch name
   *
   * @param {object} params Parameters of the configuration
   *
   * @param {string} [params.trigger] Possible values include: 'continous',
   * 'continuous', 'manual'
   *
   * @param {boolean} [params.testsEnabled]
   *
   * @param {boolean} [params.badgeIsEnabled]
   *
   * @param {boolean} [params.signed]
   *
   * @param {string} [params.cloneFromBranch] A configured branch name to clone
   * from. If provided, all other parameters will be ignored. Only supported in
   * POST requests.
   *
   * @param {object} [params.toolsets] The branch build configuration for each
   * toolset
   *
   * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
   * part of the build steps
   *
   * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
   * project/workspace path
   *
   * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
   *
   * @param {string} [params.toolsets.xcode.certificateEncoded]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
   *
   * @param {string} [params.toolsets.xcode.certificateFileId]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
   *
   * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
   *
   * @param {string} [params.toolsets.xcode.certificateUploadId]
   *
   * @param {string} [params.toolsets.xcode.certificatePassword]
   *
   * @param {string} [params.toolsets.xcode.scheme]
   *
   * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
   * build. Available versions can be found in "/xcode_versions" API. Default is
   * latest stable version, at the time when the configuration is set.
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
   *
   * @param {string} [params.toolsets.xcode.certificateFilename]
   *
   * @param {string} [params.toolsets.xcode.teamId]
   *
   * @param {boolean} [params.toolsets.xcode.automaticSigning]
   *
   * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
   * pbxproject hash to the repositroy
   *
   * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
   * configuration of the target to archive
   *
   * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
   * selected scheme to archive
   *
   * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
   * to true forces the build to use Xcode legacy build system. Otherwise, the
   * setting from workspace settings is used.
   * By default new build system is used if workspace setting is not committed to
   * the repository. Only used for iOS React Native app, with Xcode 10.
   *
   *
   * @param {object} [params.toolsets.javascript] Build configuration when React
   * Native, or other JavaScript tech, is part of the build steps
   *
   * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
   * package.json file for the main project, e.g. "package.json" or
   * "myapp/package.json"
   *
   * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
   * unit tests, via npm test, during the build
   *
   * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
   * React Native from package.json files
   *
   * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
   * projects
   *
   * @param {string} [params.toolsets.xamarin.slnPath]
   *
   * @param {boolean} [params.toolsets.xamarin.isSimBuild]
   *
   * @param {string} [params.toolsets.xamarin.args]
   *
   * @param {string} [params.toolsets.xamarin.configuration]
   *
   * @param {string} [params.toolsets.xamarin.p12File]
   *
   * @param {string} [params.toolsets.xamarin.p12Pwd]
   *
   * @param {string} [params.toolsets.xamarin.provProfile]
   *
   * @param {string} [params.toolsets.xamarin.monoVersion]
   *
   * @param {string} [params.toolsets.xamarin.sdkBundle]
   *
   * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
   * and Mono installation.
   * The build will use the associated Mono bundled with related Xamarin SDK. If
   * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
   * precedence. If non-existing symlink is passed, the current stable Mono
   * version will be configured for building.
   *
   *
   * @param {object} [params.toolsets.android] Build configuration for Android
   * projects
   *
   * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
   * Gradle wrapper script
   *
   * @param {string} [params.toolsets.android.module] The Gradle module to build
   *
   * @param {string} [params.toolsets.android.buildVariant] The Android build
   * variant to build
   *
   * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
   * tests during the build (default)
   *
   * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
   * checks during the build (default)
   *
   * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
   * module or not
   *
   * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
   * automatic signing or not
   *
   * @param {string} [params.toolsets.android.keystorePassword] The password of
   * the keystore
   *
   * @param {string} [params.toolsets.android.keyAlias] The key alias
   *
   * @param {string} [params.toolsets.android.keyPassword] The key password
   *
   * @param {string} [params.toolsets.android.keystoreFilename] The name of the
   * keystore file
   *
   * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
   * encoded value
   *
   * @param {object} [params.artifactVersioning] The versioning configuration for
   * artifacts built for this branch
   *
   * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
   * values include: 'buildId', 'timestamp'
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UpdateOKResponseModelModelModelModelModelModelModelModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(branch, params, ownerName, appName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(branch, params, ownerName, appName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Reconfigures the branch for build
   *
   * @param {string} branch The branch name
   *
   * @param {object} params Parameters of the configuration
   *
   * @param {string} [params.trigger] Possible values include: 'continous',
   * 'continuous', 'manual'
   *
   * @param {boolean} [params.testsEnabled]
   *
   * @param {boolean} [params.badgeIsEnabled]
   *
   * @param {boolean} [params.signed]
   *
   * @param {string} [params.cloneFromBranch] A configured branch name to clone
   * from. If provided, all other parameters will be ignored. Only supported in
   * POST requests.
   *
   * @param {object} [params.toolsets] The branch build configuration for each
   * toolset
   *
   * @param {object} [params.toolsets.xcode] Build configuration when Xcode is
   * part of the build steps
   *
   * @param {string} [params.toolsets.xcode.projectOrWorkspacePath] Xcode
   * project/workspace path
   *
   * @param {string} [params.toolsets.xcode.podfilePath] Path to CococaPods file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.cartfilePath] Path to Carthage file,
   * if present
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileEncoded]
   *
   * @param {string} [params.toolsets.xcode.certificateEncoded]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFileId]
   *
   * @param {string} [params.toolsets.xcode.certificateFileId]
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileUploadId]
   *
   * @param {array} [params.toolsets.xcode.appExtensionProvisioningProfileFiles]
   *
   * @param {string} [params.toolsets.xcode.certificateUploadId]
   *
   * @param {string} [params.toolsets.xcode.certificatePassword]
   *
   * @param {string} [params.toolsets.xcode.scheme]
   *
   * @param {string} [params.toolsets.xcode.xcodeVersion] Xcode version used to
   * build. Available versions can be found in "/xcode_versions" API. Default is
   * latest stable version, at the time when the configuration is set.
   *
   * @param {string} [params.toolsets.xcode.provisioningProfileFilename]
   *
   * @param {string} [params.toolsets.xcode.certificateFilename]
   *
   * @param {string} [params.toolsets.xcode.teamId]
   *
   * @param {boolean} [params.toolsets.xcode.automaticSigning]
   *
   * @param {string} [params.toolsets.xcode.xcodeProjectSha] The selected
   * pbxproject hash to the repositroy
   *
   * @param {string} [params.toolsets.xcode.archiveConfiguration] The build
   * configuration of the target to archive
   *
   * @param {string} [params.toolsets.xcode.targetToArchive] The target id of the
   * selected scheme to archive
   *
   * @param {boolean} [params.toolsets.xcode.forceLegacyBuildSystem] Setting this
   * to true forces the build to use Xcode legacy build system. Otherwise, the
   * setting from workspace settings is used.
   * By default new build system is used if workspace setting is not committed to
   * the repository. Only used for iOS React Native app, with Xcode 10.
   *
   *
   * @param {object} [params.toolsets.javascript] Build configuration when React
   * Native, or other JavaScript tech, is part of the build steps
   *
   * @param {string} [params.toolsets.javascript.packageJsonPath] Path to
   * package.json file for the main project, e.g. "package.json" or
   * "myapp/package.json"
   *
   * @param {boolean} [params.toolsets.javascript.runTests] Whether to run Jest
   * unit tests, via npm test, during the build
   *
   * @param {string} [params.toolsets.javascript.reactNativeVersion] Version of
   * React Native from package.json files
   *
   * @param {object} [params.toolsets.xamarin] Build configuration for Xamarin
   * projects
   *
   * @param {string} [params.toolsets.xamarin.slnPath]
   *
   * @param {boolean} [params.toolsets.xamarin.isSimBuild]
   *
   * @param {string} [params.toolsets.xamarin.args]
   *
   * @param {string} [params.toolsets.xamarin.configuration]
   *
   * @param {string} [params.toolsets.xamarin.p12File]
   *
   * @param {string} [params.toolsets.xamarin.p12Pwd]
   *
   * @param {string} [params.toolsets.xamarin.provProfile]
   *
   * @param {string} [params.toolsets.xamarin.monoVersion]
   *
   * @param {string} [params.toolsets.xamarin.sdkBundle]
   *
   * @param {string} [params.toolsets.xamarin.symlink] Symlink of the SDK Bundle
   * and Mono installation.
   * The build will use the associated Mono bundled with related Xamarin SDK. If
   * both symlink and monoVersion or sdkBundle are passed, the symlink is taking
   * precedence. If non-existing symlink is passed, the current stable Mono
   * version will be configured for building.
   *
   *
   * @param {object} [params.toolsets.android] Build configuration for Android
   * projects
   *
   * @param {string} [params.toolsets.android.gradleWrapperPath] Path to the
   * Gradle wrapper script
   *
   * @param {string} [params.toolsets.android.module] The Gradle module to build
   *
   * @param {string} [params.toolsets.android.buildVariant] The Android build
   * variant to build
   *
   * @param {boolean} [params.toolsets.android.runTests] Whether to run unit
   * tests during the build (default)
   *
   * @param {boolean} [params.toolsets.android.runLint] Whether to run lint
   * checks during the build (default)
   *
   * @param {boolean} [params.toolsets.android.isRoot] Whether it is the root
   * module or not
   *
   * @param {boolean} [params.toolsets.android.automaticSigning] Whether to apply
   * automatic signing or not
   *
   * @param {string} [params.toolsets.android.keystorePassword] The password of
   * the keystore
   *
   * @param {string} [params.toolsets.android.keyAlias] The key alias
   *
   * @param {string} [params.toolsets.android.keyPassword] The key password
   *
   * @param {string} [params.toolsets.android.keystoreFilename] The name of the
   * keystore file
   *
   * @param {string} [params.toolsets.android.keystoreEncoded] The keystore
   * encoded value
   *
   * @param {object} [params.artifactVersioning] The versioning configuration for
   * artifacts built for this branch
   *
   * @param {string} [params.artifactVersioning.buildNumberFormat] Possible
   * values include: 'buildId', 'timestamp'
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UpdateOKResponseModelModelModelModelModelModelModelModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      UpdateOKResponseModelModelModelModelModelModelModelModel}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(branch, params, ownerName, appName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(branch, params, ownerName, appName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(branch, params, ownerName, appName, options, optionalCallback);
    }
  }

  /**
   * Deletes the branch build configuration
   *
   * @param {string} branch The branch name
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.payload]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeleteOKResponseModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(branch, ownerName, appName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(branch, ownerName, appName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes the branch build configuration
   *
   * @param {string} branch The branch name
   *
   * @param {string} ownerName The name of the owner
   *
   * @param {string} appName The name of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.payload]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DeleteOKResponseModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeleteOKResponseModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(branch, ownerName, appName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(branch, ownerName, appName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(branch, ownerName, appName, options, optionalCallback);
    }
  }

}

module.exports = BranchConfigurations;
