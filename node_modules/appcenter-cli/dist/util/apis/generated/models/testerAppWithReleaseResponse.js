/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a TesterAppWithReleaseResponse.
 */
class TesterAppWithReleaseResponse {
  /**
   * Create a TesterAppWithReleaseResponse.
   * @property {string} [id] The unique ID (UUID) of the app
   * @property {object} [release]
   * @property {number} [release.id] ID identifying this unique release.
   * @property {string} [release.version] The release's version.<br>
   * For iOS: CFBundleVersion from info.plist.<br>
   * For Android: android:versionCode from AppManifest.xml.
   * @property {string} [release.origin] The release's origin. Possible values
   * include: 'hockeyapp', 'appcenter'
   * @property {string} [release.shortVersion] The release's short version.<br>
   * For iOS: CFBundleShortVersionString from info.plist.<br>
   * For Android: android:versionName from AppManifest.xml.
   * @property {boolean} [release.mandatoryUpdate] A boolean which determines
   * whether the release is a mandatory update or not.
   * @property {string} [release.uploadedAt] UTC time in ISO 8601 format of the
   * uploaded time.
   * @property {boolean} [release.enabled] This value determines the whether a
   * release currently is enabled or disabled.
   * @property {boolean} [release.isExternalBuild] This value determines if a
   * release is external or not.
   * @property {number} [release.size] The release's size in bytes.
   * @property {string} [release.installUrl] The href required to install a
   * release on a mobile device. On iOS devices will be prefixed with
   * `itms-services://?action=download-manifest&url=`
   * @property {string} [release.releaseNotes] The release's release notes.
   * @property {string} [name] The app's name.
   * @property {string} [displayName] The app's display name.
   * @property {string} [description] The description of the app
   * @property {string} [iconUrl] A URL to the app's icon.
   * @property {string} [os] The app's os.
   * @property {object} [owner] The information about the app's owner
   * @property {string} [owner.id] The unique id (UUID) of the owner
   * @property {string} [owner.avatarUrl] The avatar URL of the owner
   * @property {string} [owner.displayName] The owner's display name
   * @property {string} [owner.email] The owner's email address
   * @property {string} [owner.name] The unique name that used to identify the
   * owner
   * @property {string} [owner.type] The owner type. Can either be 'org' or
   * 'user'. Possible values include: 'org', 'user'
   */
  constructor() {
  }

  /**
   * Defines the metadata of TesterAppWithReleaseResponse
   *
   * @returns {object} metadata of TesterAppWithReleaseResponse
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TesterAppWithReleaseResponse',
      type: {
        name: 'Composite',
        className: 'TesterAppWithReleaseResponse',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          release: {
            required: false,
            serializedName: 'release',
            type: {
              name: 'Composite',
              className: 'TesterAppWithReleaseResponseRelease'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'display_name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          iconUrl: {
            required: false,
            serializedName: 'icon_url',
            type: {
              name: 'String'
            }
          },
          os: {
            required: false,
            serializedName: 'os',
            type: {
              name: 'String'
            }
          },
          owner: {
            required: false,
            serializedName: 'owner',
            type: {
              name: 'Composite',
              className: 'TesterAppWithReleaseResponseOwner'
            }
          }
        }
      }
    };
  }
}

module.exports = TesterAppWithReleaseResponse;
