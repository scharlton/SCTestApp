/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a LegacyDeploymentResponseDeploymentValue.
 */
class LegacyDeploymentResponseDeploymentValue {
  /**
   * Create a LegacyDeploymentResponseDeploymentValue.
   * @property {number} [createdTime] Time at which the deployment was created
   * as a Unix timestamp.
   * @property {string} [id] The ID of the deployment (internal use only).
   * @property {string} [key] Deployment key (aka Deployment Id)
   * @property {string} name Updated deployment name
   * @property {object} [packageProperty]
   * @property {string} [packageProperty.appVersion] The version of the release
   * @property {boolean} [packageProperty.isDisabled] Flag used to determine if
   * release is disabled
   * @property {boolean} [packageProperty.isMandatory] Flag used to determine
   * if release is mandatory
   * @property {number} [packageProperty.rollout] Percentage (out of 100) that
   * release is deployed to
   * @property {string} [packageProperty.blobUrl] Location (URL) of release
   * package
   * @property {number} [packageProperty.size] Size of release package
   * @property {string} [packageProperty.releaseMethod] Method used to deploy
   * release
   * @property {number} [packageProperty.uploadTime] Release upload time as
   * epoch Unix timestamp
   * @property {string} [packageProperty.label] Release label (aka release
   * name)
   * @property {string} [packageProperty.releasedByUserId] User ID that
   * triggered most recent release
   * @property {string} [packageProperty.manifestBlobUrl] The URL location of
   * the package's manifest file.
   * @property {object} [packageProperty.diffPackageMap] Object containing URL
   * and size of changed package hashes contained in the release
   */
  constructor() {
  }

  /**
   * Defines the metadata of LegacyDeploymentResponseDeploymentValue
   *
   * @returns {object} metadata of LegacyDeploymentResponseDeploymentValue
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LegacyDeploymentResponse_deploymentValue',
      type: {
        name: 'Composite',
        className: 'LegacyDeploymentResponseDeploymentValue',
        modelProperties: {
          createdTime: {
            required: false,
            serializedName: 'createdTime',
            type: {
              name: 'Number'
            }
          },
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          key: {
            required: false,
            serializedName: 'key',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          packageProperty: {
            required: false,
            serializedName: 'package',
            type: {
              name: 'Composite',
              className: 'LegacyDeploymentResponseDeploymentValuePackage'
            }
          }
        }
      }
    };
  }
}

module.exports = LegacyDeploymentResponseDeploymentValue;
