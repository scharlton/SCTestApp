/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents database usage metrics.
 *
 */
class DatabaseMetrics {
  /**
   * Create a DatabaseMetrics.
   * @property {number} [interval]
   * @property {number} [totalRequests]
   * @property {number} [totalRequestUnits]
   * @property {number} [dataUsage]
   * @property {number} [indexUsage]
   * @property {object} [latencyMetrics]
   * @property {object} [latencyMetrics.readLatencyMetrics]
   * @property {string} [latencyMetrics.readLatencyMetrics.name]
   * @property {string} [latencyMetrics.readLatencyMetrics.unit]
   * @property {date} [latencyMetrics.readLatencyMetrics.startTime]
   * @property {date} [latencyMetrics.readLatencyMetrics.endTime]
   * @property {array} [latencyMetrics.readLatencyMetrics.metricValues]
   * @property {object} [latencyMetrics.writeLatencyMetrics]
   * @property {string} [latencyMetrics.writeLatencyMetrics.name]
   * @property {string} [latencyMetrics.writeLatencyMetrics.unit]
   * @property {date} [latencyMetrics.writeLatencyMetrics.startTime]
   * @property {date} [latencyMetrics.writeLatencyMetrics.endTime]
   * @property {array} [latencyMetrics.writeLatencyMetrics.metricValues]
   */
  constructor() {
  }

  /**
   * Defines the metadata of DatabaseMetrics
   *
   * @returns {object} metadata of DatabaseMetrics
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseMetrics',
      type: {
        name: 'Composite',
        className: 'DatabaseMetrics',
        modelProperties: {
          interval: {
            required: false,
            serializedName: 'interval',
            type: {
              name: 'Number'
            }
          },
          totalRequests: {
            required: false,
            serializedName: 'totalRequests',
            type: {
              name: 'Number'
            }
          },
          totalRequestUnits: {
            required: false,
            serializedName: 'totalRequestUnits',
            type: {
              name: 'Number'
            }
          },
          dataUsage: {
            required: false,
            serializedName: 'dataUsage',
            type: {
              name: 'Number'
            }
          },
          indexUsage: {
            required: false,
            serializedName: 'indexUsage',
            type: {
              name: 'Number'
            }
          },
          latencyMetrics: {
            required: false,
            serializedName: 'latencyMetrics',
            type: {
              name: 'Composite',
              className: 'DatabaseMetricsLatencyMetrics'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseMetrics;
