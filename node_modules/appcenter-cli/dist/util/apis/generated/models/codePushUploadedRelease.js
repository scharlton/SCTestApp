/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a CodePushUploadedRelease.
 */
class CodePushUploadedRelease {
  /**
   * Create a CodePushUploadedRelease.
   * @property {object} releaseUpload The upload metadata from the release
   * initialization step.
   * @property {uuid} [releaseUpload.id] The ID for the newly created upload.
   * It is going to be required later in the process.
   * @property {string} [releaseUpload.uploadDomain] The URL domain used to
   * upload the release.
   * @property {string} [releaseUpload.token] The URL encoded token used for
   * upload permissions.
   * @property {string} targetBinaryVersion the binary version of the
   * application
   * @property {string} [deploymentName] This specifies which deployment you
   * want to release the update to. Default is Staging.
   * @property {string} [description] This provides an optional "change log"
   * for the deployment.
   * @property {boolean} [disabled] This specifies whether an update should be
   * downloadable by end users or not.
   * @property {boolean} [mandatory] This specifies whether the update should
   * be considered mandatory or not (e.g. it includes a critical security fix).
   * @property {boolean} [noDuplicateReleaseError] This specifies that if the
   * update is identical to the latest release on the deployment, the CLI
   * should generate a warning instead of an error.
   * @property {number} [rollout] This specifies the percentage of users (as an
   * integer between 1 and 100) that should be eligible to receive this update.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CodePushUploadedRelease
   *
   * @returns {object} metadata of CodePushUploadedRelease
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CodePushUploadedRelease',
      type: {
        name: 'Composite',
        className: 'CodePushUploadedRelease',
        modelProperties: {
          releaseUpload: {
            required: true,
            serializedName: 'release_upload',
            type: {
              name: 'Composite',
              className: 'CodePushUploadedReleaseReleaseUpload'
            }
          },
          targetBinaryVersion: {
            required: true,
            serializedName: 'target_binary_version',
            type: {
              name: 'String'
            }
          },
          deploymentName: {
            required: false,
            serializedName: 'deployment_name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          disabled: {
            required: false,
            serializedName: 'disabled',
            type: {
              name: 'Boolean'
            }
          },
          mandatory: {
            required: false,
            serializedName: 'mandatory',
            type: {
              name: 'Boolean'
            }
          },
          noDuplicateReleaseError: {
            required: false,
            serializedName: 'no_duplicate_release_error',
            type: {
              name: 'Boolean'
            }
          },
          rollout: {
            required: false,
            serializedName: 'rollout',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = CodePushUploadedRelease;
