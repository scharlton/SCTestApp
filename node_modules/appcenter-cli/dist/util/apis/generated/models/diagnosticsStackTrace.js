/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * a stacktrace in a processed and prettyfied way
 *
 */
class DiagnosticsStackTrace {
  /**
   * Create a DiagnosticsStackTrace.
   * @property {string} [title]
   * @property {string} [reason]
   * @property {array} [threads]
   * @property {object} [exception]
   * @property {string} [exception.reason] Reason of the exception
   * @property {string} [exception.type] Type of the exception
   * (NSSomethingException, NullPointerException)
   * @property {array} [exception.frames] frames of the excetpion
   * @property {boolean} [exception.relevant] relevant exception (crashed)
   * @property {array} [exception.innerExceptions]
   * @property {string} [exception.platform] SDK/Platform this thread is beeing
   * generated from. Possible values include: 'ios', 'android', 'xamarin',
   * 'react-native', 'ndk', 'unity', 'other'
   */
  constructor() {
  }

  /**
   * Defines the metadata of DiagnosticsStackTrace
   *
   * @returns {object} metadata of DiagnosticsStackTrace
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DiagnosticsStackTrace',
      type: {
        name: 'Composite',
        className: 'DiagnosticsStackTrace',
        modelProperties: {
          title: {
            required: false,
            serializedName: 'title',
            type: {
              name: 'String'
            }
          },
          reason: {
            required: false,
            serializedName: 'reason',
            type: {
              name: 'String'
            }
          },
          threads: {
            required: false,
            serializedName: 'threads',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DiagnosticsThreadElementType',
                  type: {
                    name: 'Composite',
                    className: 'DiagnosticsThread'
                  }
              }
            }
          },
          exception: {
            required: false,
            serializedName: 'exception',
            type: {
              name: 'Composite',
              className: 'DiagnosticsException'
            }
          }
        }
      }
    };
  }
}

module.exports = DiagnosticsStackTrace;
